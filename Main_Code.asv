% Code to test procedures in Fujimoto_III Conjunction Analysis Example
% Created by: Yashica Khatri
% July 27 2020
% clc
clear
close all
format longg;

%% Initial Setup
% Constants
% setenv('TZ','America/Denver')
% addpath(genpath(pwd))
rng('shuffle');

constants.j2 = 1.08262617385222E-3;
constants.mu = 398600.4415; % km^3/s^2 % Negligible satellite mass
constants.rE = 6378.137; % km
constants.MU = 1.32712428E11; % km^3/s^2
constants.AU = 149597870; % km
constants.rho = 0.2;
constants.Aom = 2E-6; % km^2/kg
constants.Psrp = 4.57E-3; % kg/s^2/km
constants.Rs = 696000; %km
constants.CR = 1.5;
constants.SunT = 365.25 * 24 * 3600;
r1 = 20 / 1000; % Body 1 radius km
r2 = 20 / 1000; % Body 2 radius km
constants.R_star = r1 + r2;
constants.mu_units = constants.mu / constants.rE^3 * 3600^2;
constants.MU_units = constants.MU / constants.rE^3 * 3600^2;

% Object 1 orbit specifications
% a = 42000; e = 0.1; i = 45* pi / 180; O = 0; w = 0; M = 0; ICstate.obj1.COE = [a;e;i;O;w;M];
% a = 8000; e = 0.15; i = 60 * pi / 180; O = 0; w = 0; M = 0; ICstate.obj1.COE = [a;e;i;O;w;M];

% Chose Test Types + Propagation Time
constants.case_flag = 1; % Test number from define_cases function 
constants.points = 1E2; % Number of points currently being evaluated
constants.par = 0; % parallel runs for high # points
constants.Both_GMM = 1; % Chooses the type of MC Pc
Run_Monte_Carlo = 0; % Run MC Pc calcs?
Run_GMM_STT_Method = 1;  % Run GMMSTT Method Pc calcs?
PlotThings = 0;
constants.Pc_type = 2; % 1: GMM Pc calculations using an approximation, 2: GMM Pc calcs using numerical double integration
constants.flagJ2 = 0; % Flag for J2 Secular dynamics + 2BP
constants.flagSDS = 1; % Flag for the Simplified Dynamical System (or SDS+SP)
constants.STTOrder = 2;
constants.StateDim = 6;
constants.options = odeset('RelTol', 1E-13,'AbsTol',1E-13);
constants.tol = 1E-14;
constants.STTDim = 8;
constants.dynamicsChoice = "SDSplusSP";
constants.tlim = 10000; % Time before and after TCA to test
Points = load('lebedev_131.txt');
constants.gridPoints = getLebedevGrid(Points,constants.R_star);
constants.smallTimeWindow = 1000;

flagNewSymbolicCalcs = 0;
constants.flagCorrected = 1;
constants.flagRunningTestProp = 0;
saveResultsToText = 0;
RCRun = 0;

constants.fig1 = 1;
constants.plot_GMM_ell = 0; % 1: plot GMM ellipses (usually used when fig2 = 1 and testing at a set time t)
constants.fig2 = 0; % Plot: Testing the GMM spread at a set time t = P_prop from function define cases
constants.fig3 = 0; constants.num = 1; % Plot: Compare pdfs of given distribution and computed GMM distribution
constants.fig4 = 0; % Plot: Check the weight + mean distribution of the GMMs

% Object orbit specification
[ICstate, constants.MC_Pc, constants.MC_Std, constants.P_prop, constants.JMAX, constants.tot_points] = define_cases(constants); % Choses the test case

% Other Constants definition
if constants.fig2 == 1; constants.JMAX = [15]; end % Replaces given JMAX (#GMM comps) with a small JMAX when testing a small # GMMs at set time t = P_prop
ICstate.obj1.a_units = ICstate.obj1.Eq(1) / constants.rE;
ICstate.obj2.a_units = ICstate.obj2.Eq(1) / constants.rE;
OP1 = (2 * pi * sqrt(ICstate.obj1.Eq(1)^3/constants.mu));
nOrbits1 = floor(constants.P_prop / OP1);
constants.addSPTime1 = 0.0001;
OP2 = (2 * pi * sqrt(ICstate.obj2.Eq(1)^3/constants.mu));
nOrbits2 = floor(constants.P_prop / OP2);
constants.addSPTime2 = 0.0001;
STM = eye(8);
STMo{1} = eye(constants.STTDim);
STMo{2} = zeros(constants.STTDim,constants.STTDim,constants.STTDim);
constants.initiateSTT = STMo;
constants.timeWindow = OP1 / 2.5;

if flagNewSymbolicCalcs == 1
    OUT = SymbolicSDSJ2Computer(constants.mu, constants.rE, constants.j2, 2, "SP", 0);
end
%% New State + Covariance defintions
P = [0.0067664 -0.0029183 0.0027112 -9.9816E-7 -1.7636E-7 2.1797E-6;...
    -0.0029183 0.005348 -0.0011671 -1.5861E-6 -3.5203E-7 3.3414E-6;...
    0.0027112 -0.0011671 0.001087 -3.9883E-7 -7.5945E-8 8.6148E-7;...
    -9.9816E-7 -1.5861E-6 -3.9883E-7 9.4587E-9 -1.1375E-10 1.1511E-9;...
    -1.7636E-7 -3.5203E-7 -7.5945E-8 -1.1375E-10 9.8844E-9 8.5671E-11;...
    2.1797E-6 3.3414E-6 8.6148E-7 1.1511E-9 8.5671E-11 7.2859E-9];
P2 = P; % Large uncertainty for object 2
ICstate.obj1.PoCart = P;
ICstate.obj2.PoCart = P2;

% Poincare Uncertainty + Covariance Definition
PQW_to_IJK = PQW_to_IJK_transform(ICstate.obj1.COE,0);
PQW_to_IJK2 = PQW_to_IJK_transform(ICstate.obj2.COE,0);
J1 = [PQW_to_IJK zeros(3,3); zeros(3,3) PQW_to_IJK]; J1_2 = [PQW_to_IJK2 zeros(3,3); zeros(3,3) PQW_to_IJK2];
J2 = JacobianCalc(ICstate.obj1.COE, constants.mu, 0, 0); J2_2 = JacobianCalc(ICstate.obj2.COE, constants.mu, 0, 0);
ICstate.obj1.PoPoincare = J2 * J1 * P * J1' * J2';
ICstate.obj2.PoPoincare = J2_2 * J1_2 * P2 * J1_2' * J2_2';

% MC Pc Calculations
if Run_Monte_Carlo == 1
    if constants.par == 1
        if RCRun == 1
            parpool('local',24);
        else
            parpool('local',4);
        end
    end
    tic
    NewMCPc = Compute_MC_Pc_Cart_1on1(ICstate, constants)
    constants.MC_Pc = NewMCPc;
    toc
    if constants.par == 1
        delete(gcp('nocreate')) 
    end
end

% GMM-STT Method Pc Calculations
if Run_GMM_STT_Method == 1
    if constants.par == 1
        if RCRun == 1
            parpool('local',24);
        else
            parpool('local',4);
        end
    end
    [constants.GMMSTT_Pc, GMM_MEAN, Q_new] = ComputeGMMSTTMethodPc_test(ICstate,constants); % _test
    if constants.par == 1
        delete(gcp('nocreate')) 
    end
else
    if constants.case_flag == 1
%         constants.GMMSTT_Pc = [1.41857111360531e-05;2.17358804853607e-05; 2.35354803818601e-05];%[1.41857111360531e-05;9.48316071373459e-06;2.36440273386695e-05]; %[7.5658960537475e-05; 4.08053084870099e-05;4.30328843522549e-05]/2/pi;
%         constants.GMMSTT_Pc = 1.20414975851933e-05;
%         constants.GMMSTT_Pc = [1.67716834508162e-05      2.42667759313953e-05      4.08100099815305e-05 3.85436798923756e-05]'; % Testing with short-term method[15;37;101;201] I
% ^^ Incorrect results with error in code
        constants.GMMSTT_Pc = [1.41745272872555e-05, 1.57199E-5, 2.5768E-5,2.779E-5, 2.63572081994561e-05]; % 15; 37; 101; 201; 501
        GMMSTTRunTime = [885]; %[2745];
    elseif constants.case_flag == 12
        if constants.dynamicsChoice == "SDSplusSP"
            constants.GMMSTT_Pc = [3.88948592665377e-05; 4.89522868951282e-05; 4.86597823474693e-05; 4.85605374855137e-05]; % Short-term results at GMM = [37; ]
%             GMMSTTRunTime = [157.005628;1100.365792; 9696.702569; 25553.492480];
%             constants.GMMSTT_Pc = [4.66682007650776e-05,4.3E-5,5.43945E-5]; % Testing with long-term method [15;101]
        elseif constants.dynamicsChoice == "SDS"
            constants.GMMSTT_Pc = [1.67173991690038e-05; 2.68878337532898e-05; 3.00597129753857e-05];   % Case 12 SDS results at GMM = 37,101
            GMMSTTRunTime = [158.559595;1118; 9610]; % Using 4 parallelised loops
        end
        %     constants.GMMSTT_Pc = [0.000766364318274495      0.000766432980157718      0.000766442333219442];%     constants.GMMSTT_Pc = [.000766365175844657      0.000766433808795322      0.000766443141696667];%     constants.GMMSTT_Pc = [0.000135550749068658 0.000135289578767202 0.000135249677157552];%     constants.GMMSTT_Pc = [0.00013554650558331      0.000135285606224586      0.000135245739362154];%     constants.GMMSTT_Pc = [1.16846176873785e-05       8.3514272502405e-06       7.5961297781155e-06];%     constants.GMMSTT_Pc = [1.07128323515204e-05 8.18355614713626e-06 7.30892970487094e-06 7.2409e-06];
    end
    GMM_MEAN = 1;
    Q_new = 1;
end
 GMMSTTRunTime = [885];
% Plotting
if PlotThings == 1
    Main_Plotting(constants,GMM_MEAN, Q_new); % Plot the Pc comparisons and distribution comparison at t = P_prop
end

% Print results to file
fprintf('Using dynamics: %s\n',constants.dynamicsChoice)
fprintf('MC Pc = %.10f \n', constants.MC_Pc);
for q = 1:length(constants.JMAX)
    fprintf('GMM-STT Method Pc for %i GMMs = %.10f \n', constants.JMAX(q), constants.GMMSTT_Pc(q) );
end

% % Save results in new file
if saveResultsToText == 1
    MCRunTime = 7481; %^38527.876014; 180422.633827
    % Creates a new txt file and saves results
    fileName = strcat('Results_Case',num2str(constants.case_flag),'_Using_',constants.dynamicsChoice,'_301.txt');
    fileID = fopen(fileName,'w');
    fprintf(fileID,'Object 1 Specs:\nCOE = [%.2f km, %.2f, %.2f rad, %.2f rad, %.2f rad, %.2f rad] \nInitial Cartesian Covariance [km;km/s] = \n', ICstate.obj1.COE); % [a;e;i;O;w;M]
    fprintf(fileID,'%.6e, %.6e, %.6e, %.6e, %.6e, %.6e\n', ICstate.obj1.PoCart); % [a;e;i;O;w;M]
    fprintf(fileID,'\n\nObject 2 Specs:\nCOE = [%.2f km, %.2f, %.2f rad, %.2f rad, %.2f rad, %.2f rad] \nInitial Cartesian Covariance [km;km/s] = \n', ICstate.obj2.COE); % [a;e;i;O;w;M]
    fprintf(fileID,'%.6e, %.6e, %.6e, %.6e, %.6e, %.6e\n', ICstate.obj2.PoCart); % [a;e;i;O;w;M]
    fprintf(fileID,'\n\nResults from analysis:\nMC Pc = %.10f for %.2e points, , with runtime of %.2f seconds using 24 workers in parallel.\n', constants.MC_Pc,constants.tot_points, MCRunTime);
    for iter = 1:length(constants.JMAX)
        fprintf(fileID,'GMM-STT Method Pc for %i GMMs = %.10f, with runtime of %.2f seconds using 4 workers in parallel.\n', constants.JMAX(iter), constants.GMMSTT_Pc(iter), GMMSTTRunTime(iter));
    end
    fclose(fileID);
end